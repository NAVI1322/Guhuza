generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     Role
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt // Add this default value to fix the issue
  Employee Employee?
  Recruiter Recruiter?
}

model Employee {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String  @unique
  about     String?
  userId    Int     @unique // Foreign key to User
  user      User    @relation(fields: [userId], references: [id])
  history   E_History[]
  archived  E_Archive[]
  applications Application[] // Applications submitted by the employee
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Recruiter {
  id          String  @id @default(uuid())
  companyName String
  firstName  String
  lastName   String
  email       String
  userId      Int     @unique // Foreign key to User
  user        User    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime?  @updatedAt
  AvaiableJobs AvailableJob[]
  Application Application[]
}
model AvailableJob {
    id          String      @id @default(uuid())
    recruiterId String?     
    recruiter   Recruiter?  @relation(fields: [recruiterId], references: [id])
    jobName     String
    questions   Question[]  @relation("JobQuestions")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime?   @updatedAt
}

model Question {
    id            String       @id @default(uuid())
    jobId         String?
    availableJob  AvailableJob? @relation("JobQuestions", fields: [jobId], references: [id])
    type          String
    content       String
    options       String[]     // Store options as an array of strings
    correctAnswers String[]   
    createdAt   DateTime    @default(now())
    updatedAt   DateTime?   @updatedAt  // Store correct answers as an array of strings
}

model Application {
  id            String    @id @default(uuid())
  employeeId    String    // Foreign key to Employee
  employee      Employee  @relation(fields: [employeeId], references: [id])
  recruiterId   String?   // Foreign key to Recruiter (nullable if applied directly by employee)
  recruiter     Recruiter? @relation(fields: [recruiterId], references: [id])
  position      String
  status        ApplicationStatus // Enum for PENDING, ACCEPTED, REJECTED, etc.
  appliedAt     DateTime  @default(now())
  reviewedAt    DateTime?
}

model E_History {
  id          String   @id @default(uuid())
  employeeId  String   // Foreign key to Employee
  employee    Employee @relation(fields: [employeeId], references: [id])
  companyName String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String
}



model E_Archive {
  id          String   @id @default(uuid())
  employeeId  String   // Foreign key to Employee
  employee    Employee @relation(fields: [employeeId], references: [id])
  companyName String
  archivedAt  DateTime @default(now())
}

enum Role {
  JOB_SEEKER
  RECRUITER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  ARCHIVED
}